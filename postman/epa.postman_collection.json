{
	"info": {
		"_postman_id": "af56c54d-5e9a-4292-9037-005861825e73",
		"name": "epa Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21857559"
	},
	"item": [
		{
			"name": "Get and save Token",
			"item": [
				{
					"name": "Register admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Георг\",\r\n  \"nickName\": \"@igor\",\r\n  \"city\": \"Miami\",\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\",\r\n  \"birthday\": \"2024-03-07\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"cybersecurity\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/employee/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employee",
			"item": [
				{
					"name": "add employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Иван Иванович\",\r\n  \"email\": \"mail@mail.ru\",\r\n  \"password\": \"password1\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee fail name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \" \",\r\n  \"email\": \"empty@mail.ru\",\r\n  \"password\": \"password1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee fail email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Иван Иванович\",\r\n  \"email\": \"mail@mail..ru\",\r\n  \"password\": \"password1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "update employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee update response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Джон Иванович\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "update employee unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Джон Иванович\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Тест Иванович\",\r\n  \"email\": \"mail2@mail.ru\",\r\n  \"password\": \"password2\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get All employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list employee response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test employee[2] 'fullName' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('fullName');\r",
									"    pm.expect(jsonData[2].fullName, '\"fullName\" must be \"Иванов Джон Иванович\"').to.eql(\"Иванов Джон Иванович\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get employees by Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list employee response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test employee[1] 'fullName' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('fullName');\r",
									"    pm.expect(jsonData[1].fullName, '\"fullName\" must be \"Иванов Тест Иванович\"').to.eql(\"Иванов Тест Иванович\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/employee/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "add project 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test project 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Developer sharks\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "add project 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test project 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Googlez\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Оклахом Борис Джовански\",\r\n  \"nickName\": \"@appalachi\",\r\n  \"email\": \"obj@yahoo.com\",\r\n  \"password\": \"oklahomchik\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Богдан Хмельницкий\",\r\n  \"nickName\": \"@kazak\",\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Рексар\",\r\n  \"nickName\": \"@klyk\",\r\n  \"email\": \"ork@orda.net\",\r\n  \"password\": \"hereisall\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get admin projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "update project 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test project 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Developer sheeps\",\r\n    \"status\":\"COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project/1?employeeId=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project",
								"1"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get project 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/project/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"project",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get admin projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"project"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create task1 admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Test create task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.name).to.eql('task1');\r",
									"    pm.expect(jsonData.description).to.eql('task1 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"task1\",\n  \"description\": \"task1 description\",\n  \"projectId\": 1,\n  \"executorId\": 5,\n  \"deadLine\": \"2246-08-20\",\n  \"basicPoints\": 100,\n  \"penaltyPoints\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create task2 admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Test create task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('task2');\r",
									"    pm.expect(jsonData.description).to.eql('task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"task2\",\n  \"description\": \"task2 description\",\n  \"projectId\": 1,\n  \"executorId\": 6,\n  \"deadLine\": \"2000-08-20\",\n  \"basicPoints\": 100,\n  \"penaltyPoints\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"    pm.expect(jsonData[0].name).to.eql('task1');\r",
									"    pm.expect(jsonData[0].deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData[0].basicPoints).to.eql(100);\r",
									"\r",
									"    pm.expect(jsonData[1].id).to.eql(2);\r",
									"    pm.expect(jsonData[1].name).to.eql('task2');\r",
									"    pm.expect(jsonData[1].deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData[1].basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks employee By Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"    pm.expect(jsonData[0].name).to.eql('task1');\r",
									"    pm.expect(jsonData[0].deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData[0].basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/task?employeeId=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "5"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Task By Id admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test get user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.name).to.eql('task1');\r",
									"    pm.expect(jsonData.description).to.eql('task1 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test update task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"u task2 name\",\n  \"description\": \"u task2 description\",\n  \"projectId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(2);\r",
									"    pm.expect(jsonData[0].name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData[0].deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData[0].basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Task By Id employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test get user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/task/:id1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task",
								":id1"
							],
							"variable": [
								{
									"key": "id1",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update status to IN_PROGRESS employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test update user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"    pm.expect(jsonData.status).to.eql(\"IN_PROGRESS\");   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/task/:id?status=in_progress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task",
								":id"
							],
							"query": [
								{
									"key": "status",
									"value": "in_progress"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Save token Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update status task2 to DONE employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test update user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2000-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"    pm.expect(jsonData.status).to.eql(\"DONE\");   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"DONE\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update status task1 to DONE employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test create task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.name).to.eql('task1');\r",
									"    pm.expect(jsonData.description).to.eql('task1 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"    pm.expect(jsonData.status).to.eql(\"DONE\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"DONE\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get team statistic admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test team statistic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.completedOnTimePercent).to.eql(50.0);\r",
									"    pm.expect(jsonData.delayedPercent).to.eql(50.0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/task/team?range-start=2024-01-01&range-end=2025-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"task",
								"team"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get individual statistic admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData[0].employeeId).to.eql(4);\r",
									"    pm.expect(jsonData[0].completedOnTimePercent).to.eql(0);\r",
									"    pm.expect(jsonData[0].delayedPercent).to.eql(0);\r",
									"\r",
									"    pm.expect(jsonData[1].employeeId).to.eql(5);\r",
									"    pm.expect(jsonData[1].completedOnTimePercent).to.eql(100);\r",
									"    pm.expect(jsonData[1].delayedPercent).to.eql(0);\r",
									"\r",
									"    pm.expect(jsonData[2].employeeId).to.eql(6);\r",
									"    pm.expect(jsonData[2].completedOnTimePercent).to.eql(0);\r",
									"    pm.expect(jsonData[2].delayedPercent).to.eql(100);\r",
									"\r",
									"    pm.expect(jsonData[3].employeeId).to.eql(7);\r",
									"    pm.expect(jsonData[3].completedOnTimePercent).to.eql(0);\r",
									"    pm.expect(jsonData[3].delayedPercent).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/task/individual?range-start=2024-01-01&range-end=2025-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"task",
								"individual"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get team statistic employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test team statistic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.completedOnTimePercent).to.eql(50.0);\r",
									"    pm.expect(jsonData.delayedPercent).to.eql(50.0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/stat/task/team?range-start=2024-01-01&range-end=2025-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"stat",
								"task",
								"team"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get individual statistic employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test individual statistic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('employeeId');\r",
									"    pm.expect(jsonData.employeeId, '\"id\" must be 6').to.eql(6);\r",
									"    pm.expect(jsonData.employeeFullName).to.eql(\"Богдан Хмельницкий\");\r",
									"    pm.expect(jsonData.employeePosition).to.eql(\"dev\");\r",
									"    pm.expect(jsonData.completedOnTimePercent).to.eql(0.0);\r",
									"    pm.expect(jsonData.delayedPercent).to.eql(100.0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/stat/task/individual?range-start=2024-01-01&range-end=2025-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"stat",
								"task",
								"individual"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Technologies",
			"item": [
				{
					"name": "Technology 1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has technology create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test technology 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test technology 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Technology1\"').to.eql('Technology1');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Technology1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/technology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology"
							]
						}
					},
					"response": []
				},
				{
					"name": "Technology 2 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has technology create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test technology 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test technology 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Technology2\"').to.eql('Technology2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Technology2\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/technology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology"
							]
						}
					},
					"response": []
				},
				{
					"name": "Technology create fail name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);",
									"});\r",
									"pm.test(\"Has error response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Te\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/technology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology"
							]
						}
					},
					"response": []
				},
				{
					"name": "Technology 2 update name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test technology 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"updateTechnology2\"').to.eql('updateTechnology2');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"updateTechnology2\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/technology/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology",
								"2"
							],
							"variable": [
								{
									"key": "technologyId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Technology update unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404]);",
									"});\r",
									"pm.test(\"Has error response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Technology999\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/technology/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All technologies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});\r",
									"pm.test(\"Test list technologies response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});\r",
									"pm.test(\"Test technology[1] 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"updateTechnology2\"').to.eql('updateTechnology2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/technology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get technology 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;\r",
									"});",
									"pm.test(\"Has technology create response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test technology 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/technology/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete technology 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/technology/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"technology",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "open api errors",
			"item": [
				{
					"name": "Register admin 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"\",\r\n  \"nickName\": \"@igor\",\r\n  \"city\": \"Miami\",\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\",\r\n  \"birthday\": \"2024-03-07\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"cybersecurity\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register admin 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Георг\",\r\n  \"nickName\": \"@igor\",\r\n  \"city\": \"Miami\",\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\",\r\n  \"birthday\": \"2024-03-07\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"cybersecurity\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token wrong email format 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igoryandexru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token no email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token blank email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \" \",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token no password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token wrong password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token not existed email 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor1@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "remoteUrl",
			"value": "http://158.160.121.57:60606",
			"type": "string",
			"disabled": true
		}
	]
}