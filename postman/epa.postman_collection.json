{
	"info": {
		"_postman_id": "e2f0a515-3a2b-474d-94b9-318825588d18",
		"name": "epa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26701489"
	},
	"item": [
		{
			"name": "Get and save Token",
			"item": [
				{
					"name": "Register admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Георг\",\r\n  \"email\": \"IGOR@yandex.ru\",\r\n  \"password\": \"ironmanish\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@YANDEX.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "1ee3e71e-4ac8-4f98-8a0f-ed77b2998c35"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/employee/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employee",
			"item": [
				{
					"name": "add employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "b10efade-0aac-415c-a0b2-dca5448c0b22"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "1bbbdf8e-fb58-4af3-a8c1-589e79a2e0c4"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "99fa5889-6d16-4052-ab88-cc4d493e1bc3",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "8295dc75-9f96-4e5e-b805-1a22530662b4",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "42bf8291-4899-4813-8cc8-b2a81c4cea67",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "c4387608-28ed-439a-8a5e-a2295b6e88f4",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Иван Иванович\",\r\n  \"email\": \"MAIL@mail.ru\",\r\n  \"password\": \"password1\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Employee high register email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"mail@mail.RU\",\r\n  \"password\": \"password1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@YANDEX.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee fail name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "8b08262e-7ac0-4f9e-835b-e6dc8f03c6d4"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "54c7d0b4-c698-4067-b79f-880bfa2049dd"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \" \",\r\n  \"email\": \"empty@mail.ru\",\r\n  \"password\": \"password1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee fail email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "d7a9f4b1-ed29-4e67-a51b-928473e0e67f"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "cb0801a8-2d4b-46f1-ad37-775174545180"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Иван Иванович\",\r\n  \"email\": \"mail@mail..ru\",\r\n  \"password\": \"password1\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "update employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee update response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "22918fae-2eb2-4e9f-a532-8bdb37abc2a9"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "81d9586a-85f5-4f1c-997e-df3b1fc20ac5"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Джон Иванович\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "update employee unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([500, 404]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "cec789ae-222a-4110-adb3-2f5a5dd4d626"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "0c85cdf5-a2f1-44db-8380-b7f5cf897649"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Джон Иванович\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "a8c02d6b-2116-439e-9b1d-75f0c2fe0a61"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "dc62ae56-59f6-4f1e-894e-f92978478288"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Иванов Тест Иванович\",\r\n  \"email\": \"mail2@MAIL.ru\",\r\n  \"password\": \"password2\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get All employees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list employee response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "6bf9e31e-29a1-4b98-b1a9-28c43db64edb"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get employees by Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list employee response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test employee[1] 'fullName' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('fullName');\r",
									"    pm.expect(jsonData[1].fullName, '\"fullName\" must be \"Иванов Тест Иванович\"').to.eql(\"Иванов Тест Иванович\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "a6433bf1-5b8d-4e33-93ce-3639f7490966"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "d3f814aa-0c10-44ab-99b6-b28b96481efb"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/employee/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "d9fffd03-cfbe-46c3-96c2-7d67df60abf7"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee",
								"3"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "add project 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test project 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Developer sharks\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "add project 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test project 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Googlez\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "52c3b143-fc4e-4b90-8c5d-2908144f4edd"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "b4dd3f46-67d5-4cc7-9c04-a673c8e9f422"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "3ae7cc90-ace1-461a-86e2-eb649da37612",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "4477b524-6d0d-4727-a498-c18e71b0292f",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "fa8c5c25-ff1c-4f43-a352-0d29bf4695b4",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "bc0f034b-1187-4099-bec2-68ce6eb4b6de",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Оклахом Борис Джовански\",\r\n  \"nickName\": \"@appalachi\",\r\n  \"email\": \"obj@yahoo.com\",\r\n  \"password\": \"oklahomchik\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "fac73aa7-6300-46a4-af44-e5b2412f4ad9"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "84462bff-8adf-4c7f-9f4c-37ad6aa3b309"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "064e4f41-1b83-4b9e-b1f0-ce0d8e32fb66",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "2c500e8d-ac8d-4804-b9e2-e7e6ca52c904",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "a2895868-ea4c-4004-8083-72876265469f",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "c2aadbb2-7cd3-4bd2-8521-0cbde09d0eaa",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Богдан Хмельницкий\",\r\n  \"nickName\": \"@kazak\",\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "f692234e-f08a-4b03-87da-43b5de92fdae"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "f50f1df9-9f3c-44a6-9e78-061cd78be582"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "d7b43bd2-feda-4d6f-9bd9-b307c90592a7",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "d30828a1-d08f-4852-a465-f781692fec60",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "5395cd3a-f1c5-4746-9896-dd8d04d01747",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "69ab8bc0-7023-4e67-862f-22c0747ab669",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Рексар\",\r\n  \"nickName\": \"@klyk\",\r\n  \"email\": \"ork@orda.net\",\r\n  \"password\": \"hereisall\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get admin projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "38511330-e9d3-4002-a8d7-787b42f3ab6c"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "1f92e0a6-9c71-41e5-ab15-6d698a44808b"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "4484ab47-94c6-443a-bd10-d5f6cad9104a",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "b7363e37-f216-4b10-bfb4-c1da74578802",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "998ecba1-3039-4f21-b663-29eca836d38e",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "73c258af-55d3-4f48-b2bb-cf16d084b0ce",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "update project 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test project 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Developer sheeps\",\r\n    \"status\":\"COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project/1?employeeId=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project",
								"1"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get project 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "3f9adde5-88fb-436d-b336-3eae963be5aa"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "ce99bfa4-08a7-4456-b6de-371fff8f7ad3"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "89004903-5492-41e1-bd23-436a15d11744",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "efcd0d9e-b292-4b64-9f44-fb9de7c75d33",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "d9b4f6a2-79d1-44a1-800a-e20b2d279b78",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "9faa3c2c-f6df-480a-a20f-9ba30e021870",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/project/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"project",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get admin projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "09e7743e-a4d4-44d8-a483-683f763c4f9b"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "22510d7c-72d9-47d7-8416-a127beb4d226"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "118aea95-ecf4-4a3c-8124-7933b0228d52",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "722ded25-5cda-4664-979c-10f7d2d3f16a",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "df2f88d7-d20b-4cde-83ae-5c14f0526400",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "ca4c7a7d-8c64-4537-8166-045a68b73197",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"project"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create task1 admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Test create task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.name).to.eql('task1');\r",
									"    pm.expect(jsonData.description).to.eql('task1 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "0c219d63-4e09-432b-a262-e52179ad6335"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "f008e0bf-9471-4117-abe2-b62b78c5c32b"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"task1\",\n  \"description\": \"task1 description\",\n  \"projectId\": 1,\n  \"executorId\": 5,\n  \"deadLine\": \"2246-08-20\",\n  \"basicPoints\": 100,\n  \"penaltyPoints\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create task2 admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Test create task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('task2');\r",
									"    pm.expect(jsonData.description).to.eql('task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "15cfb38b-83cc-4c73-95e9-643f74144836"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "fa0d8c37-42aa-41e6-95c0-230bbf11ab4c"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"task2\",\n  \"description\": \"task2 description\",\n  \"projectId\": 1,\n  \"executorId\": 6,\n  \"deadLine\": \"2025-08-20\",\n  \"basicPoints\": 100,\n  \"penaltyPoints\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"    pm.expect(jsonData[0].name).to.eql('task1');\r",
									"    pm.expect(jsonData[0].deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData[0].basicPoints).to.eql(100);\r",
									"\r",
									"    pm.expect(jsonData[1].id).to.eql(2);\r",
									"    pm.expect(jsonData[1].name).to.eql('task2');\r",
									"    pm.expect(jsonData[1].deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData[1].basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "8fbc6b91-b2f6-4a33-947f-2d14ef3870c5"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text",
								"uuid": "b813c2ca-34d5-446e-879d-a3fc86641491"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text",
								"uuid": "f1e9527a-a549-40f7-91ac-ec1eeaaed225"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks employee By Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"    pm.expect(jsonData[0].name).to.eql('task1');\r",
									"    pm.expect(jsonData[0].deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData[0].basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "51e06249-10fb-4986-91f7-62098e1dbcbe"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/task/find?employeeId=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								"find"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "5"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Task By Id admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test get user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.name).to.eql('task1');\r",
									"    pm.expect(jsonData.description).to.eql('task1 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2246-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "be33873d-aa6c-4b66-88c4-8a446f2fa470"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) ",
									"uuid": "1c016b5a-e061-4c0d-a002-76d6a99e8808"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test update task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "61188f5b-43f7-426e-a64c-57382816723d"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "2a9353d9-2aca-46c7-a964-6f55e0da4986"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"u task2 name\",\n  \"description\": \"u task2 description\",\n  \"projectId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"uuid": "680968a3-771c-4bd5-9c37-c9e74e29e134"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(2);\r",
									"    pm.expect(jsonData[0].name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData[0].deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData[0].basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "3c363317-b827-408b-904b-626ddbb3f17e"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Task By Id employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test get user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "b723bc29-4710-4ec4-b132-4f5c83ef8449"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/task/:id1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task",
								":id1"
							],
							"variable": [
								{
									"key": "id1",
									"value": "2",
									"uuid": "f8512e47-b87b-4296-9549-904d47d8a8f7"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-29029902",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update status to IN_PROGRESS employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test update user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"    pm.expect(jsonData.status).to.eql(\"IN_PROGRESS\");   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "56889e15-7e26-4d99-a7de-7baac1c6966e"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "20b523fb-4172-44f7-9237-e89001491177"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/task/:id?status=in_progress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task",
								":id"
							],
							"query": [
								{
									"key": "status",
									"value": "in_progress"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"uuid": "a3d69c6d-7dbb-4991-9235-36068ac53abf"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Save token Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update status task2 to DONE employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test update user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(2);\r",
									"    pm.expect(jsonData.name).to.eql('u task2 name');\r",
									"    pm.expect(jsonData.description).to.eql('u task2 description');\r",
									"    pm.expect(jsonData.deadLine).to.eql(\"2025-08-20\");\r",
									"    pm.expect(jsonData.basicPoints).to.eql(100);\r",
									"    pm.expect(jsonData.penaltyPoints).to.eql(5);\r",
									"    pm.expect(jsonData.status).to.eql(\"DONE\");   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "7698688c-ad00-4c46-baa6-0d24120660ce"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "c34e6c84-233d-496b-a77d-5b2ca5275644"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"DONE\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"uuid": "6a4a0a35-105e-4dd6-b9b3-8caaf57baab3"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get team statistic admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test team statistic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.completedOnTimePercent).to.eql(100);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "fe36351d-2db3-49ad-a427-d76ae9c890d5"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text",
								"uuid": "26d6261c-c327-4683-8063-e6502bae484f"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text",
								"uuid": "3fd11c5e-4eeb-410f-9f96-79a9a3eeb3a6"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/task/team?range-start=2024-01-01&range-end=2026-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"task",
								"team"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2026-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get individual statistic admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData[0].employeeId).to.eql(4);\r",
									"    pm.expect(jsonData[0].completedOnTimePercent).to.eql(0);\r",
									"    pm.expect(jsonData[0].delayedPercent).to.eql(0);\r",
									"\r",
									"    pm.expect(jsonData[1].employeeId).to.eql(5);\r",
									"    pm.expect(jsonData[1].completedOnTimePercent).to.eql(0);\r",
									"    pm.expect(jsonData[1].delayedPercent).to.eql(0);\r",
									"\r",
									"    pm.expect(jsonData[2].employeeId).to.eql(6);\r",
									"    pm.expect(jsonData[2].completedOnTimePercent).to.eql(100);\r",
									"    pm.expect(jsonData[2].delayedPercent).to.eql(0);\r",
									"\r",
									"    pm.expect(jsonData[3].employeeId).to.eql(7);\r",
									"    pm.expect(jsonData[3].completedOnTimePercent).to.eql(0);\r",
									"    pm.expect(jsonData[3].delayedPercent).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "86ea23d6-4729-4ec7-b003-ea3311ab1fea"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text",
								"uuid": "347577e4-ca9a-49e3-a1a9-b2fc53b7f5c7"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text",
								"uuid": "b0bbaacd-b8fc-4313-9409-3c208f2a51a5"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/task/individual?range-start=2024-01-01&range-end=2026-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"task",
								"individual"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2026-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get team statistic employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test team statistic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.completedOnTimePercent).to.eql(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "cb780dc8-c3f9-4867-9032-f0dc7ac5680c"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text",
								"uuid": "3876dc50-1dd1-49c9-97d7-3d559b939a5e"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text",
								"uuid": "a7b2758c-67c6-43f2-96cb-282b620cf69a"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/stat/task/team?range-start=2024-01-01&range-end=2026-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"stat",
								"task",
								"team"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2026-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get individual statistic employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test individual statistic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('employeeId');\r",
									"    pm.expect(jsonData.employeeId, '\"id\" must be 6').to.eql(6);\r",
									"    pm.expect(jsonData.employeeFullName).to.eql(\"Богдан Хмельницкий\");\r",
									"    pm.expect(jsonData.employeePosition).to.eql(\"dev\");\r",
									"    pm.expect(jsonData.completedOnTimePercent).to.eql(100);\r",
									"    pm.expect(jsonData.delayedPercent).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "270ec9d2-3a82-4d87-9fef-00950ce806b4"
							},
							{
								"key": "login",
								"value": "string2",
								"type": "text",
								"uuid": "21c431ad-f6a1-4a89-ab25-859e2d0efea3"
							},
							{
								"key": "password",
								"value": "stringst",
								"type": "text",
								"uuid": "76570f58-722f-4a27-ba3c-90d505e44120"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/stat/task/individual?range-start=2024-01-01&range-end=2025-01-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"stat",
								"task",
								"individual"
							],
							"query": [
								{
									"key": "range-start",
									"value": "2024-01-01"
								},
								{
									"key": "range-end",
									"value": "2025-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "8e4df84a-d855-4f2b-b0a8-10bcbbcc9b6c"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task By Id admin after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "fa1bf182-442d-4024-ab07-c8486f6bf5c4"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "(Required) ",
									"uuid": "f4107d42-532a-4650-8461-315be368bcf0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "open api errors",
			"item": [
				{
					"name": "Register admin 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"\",\r\n  \"nickName\": \"@igor\",\r\n  \"city\": \"Miami\",\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\",\r\n  \"birthday\": \"2024-03-07\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"cybersecurity\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register admin 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Георг\",\r\n  \"nickName\": \"@igor\",\r\n  \"city\": \"Miami\",\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\",\r\n  \"birthday\": \"2024-03-07\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"cybersecurity\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token wrong email format 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igoryandexru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token no email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token blank email 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \" \",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token no password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token wrong password 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token not existed email 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor1@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Evaluations",
			"item": [
				{
					"name": "get default criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/criteria/default",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"criteria",
								"default"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Questionnaire",
			"item": [
				{
					"name": "check is passed day after share questionnaire. True",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/is-day-passed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"is-day-passed"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last questionnaire id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all SHARED questionnaire by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 0 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/all-shared",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"all-shared"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SHARED questionnaire by id=1 by user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Status of response is BAD_REQUEST\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be BAD_REQUEST').to.eql(\"BAD_REQUEST\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update last questionnaire status to SHARED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update questionnaire with id=1 error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Status of response is BAD_REQUEST\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be BAD_REQUEST').to.eql(\"BAD_REQUEST\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n\t\"criterias\":[\r\n\t\t{\r\n\t\t\t\"name\":\"активный в чатах\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\":\"помогает при обращении к нему с просьбой\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last questionnaire id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update questionnaire with id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2,\r\n\t\"criterias\":[\r\n\t\t{\r\n\t\t\t\"name\":\"активный в чатах\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\":\"помогает при обращении к нему с просьбой\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update questionnaire with id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2,\r\n\t\"criterias\":[\r\n\t\t{\r\n\t\t\t\"name\":\"самостоятельный\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\":\"вдумчивый\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update last questionnaire status to SHARED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SHARED questionnaire by id=2 by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SHARED questionnaire by id=3 by user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Status of response is NOT_FOUND\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be NOT_FOUND').to.eql(\"NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all SHARED questionnaire by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/all-shared",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"all-shared"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SHARED questionnaire by id=2 by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Гарри Поттер\",\r\n  \"nickName\": \"@Potter\",\r\n  \"city\": \"Little Whinging\",\r\n  \"email\": \"grand-magician@muggle.net\",\r\n  \"password\": \"magic_wand\",\r\n  \"birthday\": \"1980-07-31\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"fighter against evil\",\r\n  \"department\": \"Gryffindor\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token new Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"grand-magician@muggle.net\",\r\n  \"password\": \"magic_wand\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SHARED questionnaire by id=2 by user error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Status of questionnaire is BAD_REQUEST\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be BAD_REQUEST').to.eql(\"BAD_REQUEST\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "check is passed day after share questionnaire. False",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/is-day-passed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"is-day-passed"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Evaluation Questionnaire Employee",
			"item": [
				{
					"name": "Register unused admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Кузьма\",\r\n  \"email\": \"kuz@yandex.ru\",\r\n  \"password\": \"kuzkuzkuz\",\r\n  \"birthday\": \"1980-02-07\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"house_holding\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Отец\",\r\n  \"nickName\": \"@tata\",\r\n  \"city\": \"Belgrad\",\r\n  \"email\": \"tata@yandex.ru\",\r\n  \"password\": \"hatanatata\",\r\n  \"birthday\": \"1980-02-07\",\r\n  \"role\": \"ROLE_ADMIN\",\r\n  \"position\": \"general_director\",\r\n  \"department\": \"house_holding\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"tata@yandex.ru\",\r\n  \"password\": \"hatanatata\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "5b504a69-acec-483f-b357-b083b878fc48"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/employee/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 11').to.eql(11);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "0c5a65c9-4af5-4333-a2d9-cf8c99c8beeb"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "8777391a-a811-436b-92bd-0ca879dea0a3"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "3a82e966-728c-4ffc-8ea7-def60b193a86",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "32e9c31b-fee6-4ed9-88cc-7062c4c2609a",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "08af46e6-2a58-45be-8232-e5723705294c",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "1dbb21ad-8941-43d7-bf05-c06ed5e83e2c",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Рекбаш Алош Бабош\",\r\n  \"email\": \"rec@mail.ru\",\r\n  \"password\": \"recalbash\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add employee 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has employee create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test employee 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 12').to.eql(12);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "de8c8913-5cfd-41d6-95ca-1a77bc8c6164"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"uuid": "3c8ae2c6-9e34-4ca7-85e9-1011d69df638"
							},
							{
								"key": "Host",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "073b2f8e-832f-4324-9a2b-6cdeff65056f",
								"disabled": true
							},
							{
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"type": "text",
								"uuid": "71cdd5f5-8088-49b4-ae10-e2f67755ff33",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdHJpbmcyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImV4cCI6MTcwOTgzODgyMywiaWF0IjoxNzA5ODM1MjIzfQ.MVtErFQewOYQ_1HAZ_xDCepfykfHSgCzddPx_UeEe98",
								"type": "text",
								"uuid": "309f34a4-02ef-42b3-b4a1-fe5bc165aab4",
								"disabled": true
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text",
								"uuid": "caa519ec-7613-4d56-9bab-a0eba2f191a9",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Артрок Шток Буйок\",\r\n  \"email\": \"arc@mail.ru\",\r\n  \"password\": \"arshbyuok\",\r\n  \"position\": \"dev\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/employee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "add project 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has project create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Developer buddhas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create task3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "12baafbc-46bb-41f3-9be4-31526648f1d9"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "54680171-4ea6-4427-baf2-15af61264b51"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"task3\",\n  \"description\": \"task3 description\",\n  \"projectId\": 3,\n  \"executorId\": 12,\n  \"deadLine\": \"2246-08-20\",\n  \"basicPoints\": 100,\n  \"penaltyPoints\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update status task3 to DONE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"uuid": "dfcc21e3-e8e8-4ca9-a862-21bad6793edf"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "7a4c7ccf-46e9-438e-a15e-31f4edc13341"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"DONE\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3",
									"uuid": "f6f2f0ce-1a83-45e7-ae55-f44cfae3f46c"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "get last questionnaire id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update questionnaire with id=3 duplicate name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Проверка количества элементов в criterias - их два\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.criterias.length).to.eql(2);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"criterias\":[\r\n\t\t{\r\n\t\t\t\"name\":\"активный в чатах\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\":\"активный в чатах\"\r\n\t\t},\r\n        {\r\n\t\t\t\"name\":\"помогает коллегам\"\r\n\t\t},\r\n        {\r\n\t\t\t\"name\":\"помогает коллегам\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update questionnaire with id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"criterias\":[\r\n\t\t{\r\n\t\t\t\"name\":\"активный в чатах\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\":\"помогает при обращении к нему с просьбой\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update last questionnaire status to SHARED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last questionnaire id=4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update questionnaire with id=4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"criterias\":[\r\n\t\t{\r\n\t\t\t\"name\":\"отлично ладит с коллегами\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\":\"быстро отвечает на сообщения\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "update last questionnaire status to SHARED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get last questionnaire id=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 5\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is CREATED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be CREATED').to.eql(\"CREATED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/questionnaire/last",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"questionnaire",
								"last"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 4 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment filter by fullName length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list?text=аш",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							],
							"query": [
								{
									"key": "text",
									"value": "аш"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment filter by date length = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 0 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list?from=2024-04-05&to=2024-04-06",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2024-04-06"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment filter by date length = 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 4 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list?from=2024-04-05&to=2050-04-06",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2050-04-06"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment filter by fullName and date length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list?from=2024-04-05&to=2050-04-06&text=шток",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2050-04-06"
								},
								{
									"key": "text",
									"value": "шток"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get questionnaire by id = 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Id of questionnaire is 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Status of questionnaire is SHARED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be SHARED').to.eql(\"SHARED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/questionnaire/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"questionnaire",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "add evaluation from admin to user 12 by quest 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"evaluationDtoList\": [\r\n    {\r\n      \"criteriaId\": 5,\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"criteriaId\": 6,\r\n      \"score\": 4\r\n    }\r\n  ],\r\n  \"recommendation\": \"необходимо больше спать ночью\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/evaluations?questionnaireId=4&evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"evaluations"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "4"
								},
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 3 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed length = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "add evaluation from admin to user 11 by quest 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"evaluationDtoList\": [\r\n    {\r\n      \"criteriaId\": 5,\r\n      \"score\": 4\r\n    },\r\n    {\r\n      \"criteriaId\": 6,\r\n      \"score\": 4\r\n    }\r\n  ],\r\n  \"recommendation\": \"не сиди долго над заданием. Обращайся к коллегам\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/evaluations?questionnaireId=4&evaluatedId=11",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"evaluations"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "4"
								},
								{
									"key": "evaluatedId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get assessed questionnaire 4 for employee 11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/assessed?questionnaireId=4&evaluatedId=11",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"assessed"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "4"
								},
								{
									"key": "evaluatedId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "add evaluation from admin to user 12 by quest 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"evaluationDtoList\": [\r\n    {\r\n      \"criteriaId\": 1,\r\n      \"score\": 2\r\n    }\r\n  ],\r\n  \"recommendation\": \"ты молодец, береги себя\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/evaluations?questionnaireId=3&evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"evaluations"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "3"
								},
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for employee 12 check middleScore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Middle score is equal to 2 for idQuestionnaire 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var foundItem = jsonData.find(item => item.idQuestionnaire === 3);\r",
									"    pm.expect(foundItem.middleScore).to.eql(2);\r",
									"});\r",
									"pm.test(\"Middle score is equal to 5 for idQuestionnaire 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var foundItem = jsonData.find(item => item.idQuestionnaire === 4);\r",
									"    pm.expect(foundItem.middleScore).to.eql(4.5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/list-questionnaire?evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get assessed questionnaire 12 for employee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/assessed?questionnaireId=3&evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"assessed"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "3"
								},
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed length = 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 3 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed filter by fullName length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list?text=шток",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							],
							"query": [
								{
									"key": "text",
									"value": "шток"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed filter by date length = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 0 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list?from=2024-04-05&to=2024-04-06",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2024-04-06"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed filter by date length = 0 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 3 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list?from=2024-04-05&to=2050-04-06",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2050-04-06"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed filter by fullName and date length = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list?from=2024-04-05&to=2050-04-06&text=аш",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							],
							"query": [
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2050-04-06"
								},
								{
									"key": "text",
									"value": "аш"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token employee 11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"rec@mail.ru\",\r\n  \"password\": \"recalbash\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "add evaluation from employee 11 to user 12 by quest 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"criteriaId\": 5,\r\n    \"score\": 2\r\n  },\r\n  {\r\n    \"criteriaId\": 6,\r\n    \"score\": 2\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/evaluations?questionnaireId=4&evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "4"
								},
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get assessed questionnaire 4 for employee 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed?questionnaireId=4&evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "4"
								},
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "add evaluation from employee 11 to user 12 by quest 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"criteriaId\": 6,\r\n    \"score\": 5\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/evaluations?questionnaireId=3&evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations"
							],
							"query": [
								{
									"key": "questionnaireId",
									"value": "3"
								},
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 0 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list assessed length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assessed-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assessed-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get self rating each months by year=2023",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 0 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/rating/personal?year=2023",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"rating",
								"personal"
							],
							"query": [
								{
									"key": "year",
									"value": "2023"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get self rating each months by year=2024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/rating/personal?year=2024",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"rating",
								"personal"
							],
							"query": [
								{
									"key": "year",
									"value": "2024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get command rating each months by year=2024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/rating/command?year=2024",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"rating",
								"command"
							],
							"query": [
								{
									"key": "year",
									"value": "2024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for me (id =11) with stars from 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/list-questionnaire?stars=4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "stars",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token employee 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"arc@mail.ru\",\r\n  \"password\": \"arshbyuok\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list for assessment length = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Has response body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/assess-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"assess-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for me (id =12) with stars from 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/list-questionnaire?stars=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "stars",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"tata@yandex.ru\",\r\n  \"password\": \"hatanatata\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for employee 12 check middleScore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Middle score is equal to 4 for idQuestionnaire 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var foundItem = jsonData.find(item => item.idQuestionnaire === 3);\r",
									"    pm.expect(foundItem.middleScore).to.eql(3.5);\r",
									"});\r",
									"pm.test(\"Middle score is equal to 3 for idQuestionnaire 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var foundItem = jsonData.find(item => item.idQuestionnaire === 4);\r",
									"    pm.expect(foundItem.middleScore).to.eql(3.25);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/list-questionnaire?evaluatedId=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for employee 11 check middleScore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/list-questionnaire?evaluatedId=11",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for employee 12 by middleScore length=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/list-questionnaire?evaluatedId=12&stars=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "12"
								},
								{
									"key": "stars",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for employee 12 by date length=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 2 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Middle score is equal to 4 for idQuestionnaire 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var foundItem = jsonData.find(item => item.idQuestionnaire === 3);\r",
									"    pm.expect(foundItem.middleScore).to.eql(3.5);\r",
									"});\r",
									"pm.test(\"Middle score is equal to 3 for idQuestionnaire 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var foundItem = jsonData.find(item => item.idQuestionnaire === 4);\r",
									"    pm.expect(foundItem.middleScore).to.eql(3.25);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/list-questionnaire?evaluatedId=12&from=2024-04-05&to=2050-04-06",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"list-questionnaire"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "12"
								},
								{
									"key": "from",
									"value": "2024-04-05"
								},
								{
									"key": "to",
									"value": "2050-04-06"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get evaluated questionnaires for employee 12 by date length=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/rating/personal?evaluatedId=12&year=2024",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"rating",
								"personal"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "12"
								},
								{
									"key": "year",
									"value": "2024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get rating each months for employeeId=12 and year=2024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/rating/personal?evaluatedId=12&year=2024",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"rating",
								"personal"
							],
							"query": [
								{
									"key": "evaluatedId",
									"value": "12"
								},
								{
									"key": "year",
									"value": "2024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get command rating each months by year=2023",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 0 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/rating/command?year=2023",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"rating",
								"command"
							],
							"query": [
								{
									"key": "year",
									"value": "2023"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get command rating each months by year=2024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/rating/command?year=2024",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"rating",
								"command"
							],
							"query": [
								{
									"key": "year",
									"value": "2024"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get list of years from admin creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body contains a list of 1 objects\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.has.lengthOf(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/employee/list-of-years",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"list-of-years"
							]
						}
					},
					"response": []
				},
				{
					"name": "get list of questionnairses for evaluated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/list-questionnaire",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"list-questionnaire"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Raiting and points",
			"item": [
				{
					"name": "Save token admin 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"tata@yandex.ru\",\r\n  \"password\": \"hatanatata\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get points",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "73448c07-1d05-429b-8634-5130096f3147"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/points/employee/12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"points",
								"employee",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get avg raiting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "0dcc1d18-a683-4186-b5a7-e5e20c345b00"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/rating/12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"rating",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token emp 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"arc@mail.ru\",\r\n  \"password\": \"arshbyuok\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get points Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "085e3f5c-850f-4852-acdb-dcef587ad696"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/stat/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"stat",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get avg raiting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"uuid": "7cc98956-f68d-4cf2-9c18-45d202adc42a"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/evaluations/rating",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"evaluations",
								"rating"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check assess",
			"item": [
				{
					"name": "Save token admin id=6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"igor@yandex.ru\",\r\n  \"password\": \"ironmanish\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access employee of another admin error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/employee/12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access another admin error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/employee/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"employee",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access employee of another admin for analytic error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/points/employee/12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"points",
								"employee",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access another admin analytic error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/stat/points/employee/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"stat",
								"points",
								"employee",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access task of another admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"task bask\",\r\n  \"description\": \"do it rapidly and lie on the bed rest time\",\r\n  \"projectId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/task/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access tasks for project of another admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/task/project/3?status=NEW",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task",
								"project",
								"3"
							],
							"query": [
								{
									"key": "status",
									"value": "NEW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Access task search by text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/task/find?employeeId=6&&text=y",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"task",
								"find"
							],
							"query": [
								{
									"key": "employeeId",
									"value": "6"
								},
								{
									"key": null,
									"value": null
								},
								{
									"key": "text",
									"value": "y"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save token user id=6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"access_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"hmel@ukr.net\",\r\n  \"password\": \"good_getman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access task search by text Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/task?text=p",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"task"
							],
							"query": [
								{
									"key": "text",
									"value": "p"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "remoteUrl",
			"value": "http://158.160.121.57:60606",
			"type": "string",
			"disabled": true
		}
	]
}